button <- hardware.pin1
led <- hardware.pin9;
led.configure(DIGITAL_OUT);
discoMode <- false
ledState <- 0
runTime <- 0.5
currentHour <- 0
runState <- 0
lastTime <- 0
nextTime <- 1
repeat <- true
states <- ["initRun", 
          "checkTimes", 
          "timerOver"]


settings <- {};
local _settings = server.load();

if (_settings.len() != 0)
{
    settings = _settings;
}
else{
    settings.poop; //crash
}

function run(){
  if(runState == 0){initRun(); }
  else if(runState == 1){ checkTimers();}
  else if(runState == 2){ timerOver();}
  else {
    server.log("fuck");
  }
  flipLed();
  imp.wakeup(runTime, run); 
}
function initRun(){
    server.log("settings: " + settings); 
  if(!settings || !settings.interval || 
    !("itime" in settings.interval)){
    server.log("poop no settings"); 
    return; 
  }
  lastTime = hardware.millis(); 
  nextTime = lastTime + settings.interval.itime; 
  currentHour = date().hour; 
  runState = 1; 
  if(currentHour < settings.interval.low&&
    currentHour > settings.interval.high){
    server.log("Timer only runs between the hours of " + 
        settings.interval.low + 
        " and " + 
        settings.interval.high); 
    runState = 0; 
    return; 
  }
  runState =1; 
}
function checkTimers(){
  lastTime = hardware.millis(); 
  if(lastTime >= nextTime){
    // agent.send("timesUp");  
    nextTime = lastTime + settings.interval.itime;
    runState = 2; 
  }
}
function timerOver(){
  // if(someShit(0)){
  //     runState = 1;     
  // }
  if(repeat){
      runState = 1;     
  }
}

function buttonPress(){
    local btnState = button.read(); 
    if (btnState == 1){
        server.log("btn Release");
        agent.send("button", "released, yo!");
        initRun(); 
    } 
    else{
        server.log("btn Presssed");
    }
}
function setLed(ledState) {
  led.write(ledState);
}
function flipLed(){
    ledState = 1-ledState; 
    setLed(ledState)
}
function setMode (mode){discoMode = mode;}
function disco(){
    if(discoMode){
        flipLed(); 
    } 
    imp.wakeup(0.1, disco); 
}

// register a handler for "led" messages from the agent
agent.on("led", function(ledstate) {
    setLed(ledstate); 
}); 
agent.on("disco", function(disco){
    setMode(disco);
});
// register a handler for "led" messages from the agent
agent.on("name", function(name) {
    server.log("renamed: " + name);
    settings.name = name;
    local err = server.save(settings);
    if (err == 0)
    {
        server.log("Settings saved");
    }
    else
    {
        server.log("Settings not saved. Error: " + err.tostring());
    }
    agent.send("name", settings.name);
});
agent.on("interval", function(data) {
    server.log("data: " + data); 
    if (!("interval" in settings)) {
        settings.interval = {};
    }
    settings.interval.low = data.low || 0;
    settings.interval.low = data.high || 0;
    settings.interval.low = data.itime || 0;

    local err = server.save(settings);
    if (err == 0)
    {
        server.log("Settings saved");
    }
    else
    {
        server.log("Settings not saved. Error: " + err.tostring());
    }
    //agent.send("intervalreset", settings.interval);
});

disco(); 
run(); 
agent.send("name", settings.name);
button.configure(DIGITAL_IN_PULLUP, buttonPress); 